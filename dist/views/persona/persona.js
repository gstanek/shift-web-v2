"use strict";angular.module("myApp.persona",["ui.router","myApp.realmService","myApp.ngAutocomplete"]).config(["$stateProvider","$urlRouterProvider",function(a,b){a.state("persona",{url:"/persona",templateUrl:"views/persona/persona.html",controller:"PersonaCtrl"})}]).controller("PersonaCtrl",["$scope","$http","authService","realmService","userService","shiftService","personaService",function(a,b,c,d,e,f,g){a.isActiveRealm=d.isActiveRealm(),a.availableShifts=f.getLocalShifts(),a.$on("REALM_CHANGE_EVENT",function(){a.isActiveRealm=d.isActiveRealm()});var h=function(){var a=e.getActiveUser();if(a){var b=f.getLocalShifts();return b?!0:!1}return!1};a.isShiftPresent=function(){return h()},a.availableShifts=[],a.$on("SHIFT_CHANGE_EVENT",function(){a.isShiftPresent=function(){return h()},a.availableShifts=f.getLocalShifts()}),a.radioModel="employee",a.$watchCollection("checkModel",function(){a.checkResults=[],angular.forEach(a.checkModel,function(b,c){b&&a.checkResults.push(c)})}),a.newRealmFormModel={name:"",address:"",manager:""},a.createRealm=function(){var b=(e.getActiveUser().id,{name:a.newRealmFormModel.name,address:a.address});d.createRealm(b).then(function(a){b.id=a.data.id,console.log("Realm to Store in Local Storage"+JSON.stringify(b)),d.setLocalRealm(b),g.createPersona(b.id)},function(a){console.log("Error creating realm in backend")})},a.result="",a.options={watchEnter:!0,types:"address"},a.address={},a.addressFound="",a.companyName=d.getRealmName(),a.newShiftModel={id:"",dateRangeStart:"",dateRangeEnd:"",comment:""},a.createShift=function(){var b=d.getLocalRealm(),c={start_datetime:a.newShiftModel.dateRangeStart,end_datetime:a.newShiftModel.dateRangeEnd,available:!1,realm:b.id,comment:a.newShiftModel.comment};f.storeShift(c).then(function(a){console.log("Success:"+JSON.stringify(a)),f.storeLocalShift(a.data)},function(a){console.log("Failure:"+JSON.stringify(a))})},a.beforeRenderStartDate=function(b,c,d,e,f){if(a.dateRangeEnd)for(var g=moment(a.dateRangeEnd),h=0;h<c.length;h++)c[h].localDateValue()>=g.valueOf()&&(c[h].selectable=!1)},a.beforeRenderEndDate=function(b,c,d,e,f){if(a.dateRangeStart)for(var g=moment(a.dateRangeStart).subtract(1,b).add(1,"minute"),h=0;h<c.length;h++)c[h].localDateValue()<=g.valueOf()&&(c[h].selectable=!1)},a.reclaim=function(a){i(a,!1)},a.markAvailable=function(a){console.log("ShiftID: "+JSON.stringify(a)),i(a,!0)};var i=function(a,b){var c={available:b};f.updateShift(a,c).then(function(a){console.log("Success:"+JSON.stringify(a)),f.storeLocalShift(a.data)},function(a){console.log("Failure:"+JSON.stringify(a))})};a["delete"]=function(a){console.log("in delete "+a)};var j=function(){a.isShiftPresent=function(){return h()},a.availableShifts=f.getLocalShifts()};j()}]);